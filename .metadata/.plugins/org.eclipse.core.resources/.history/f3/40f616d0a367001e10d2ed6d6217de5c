package cibertec.edu.pe.serviceImpl;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import cibertec.edu.pe.dto.UsuarioRegistroDTO;
import cibertec.edu.pe.modelo.Rol;
import cibertec.edu.pe.modelo.Usuario;
import cibertec.edu.pe.repository.UsuarioRepository;
import cibertec.edu.pe.service.UsuarioService;

@Service
public class UsuarioServiceImpl implements UsuarioService{
	
	@Autowired
	private UsuarioRepository usuarioRepo;
	
	@Autowired
	private BCryptPasswordEncoder passwordEncoder;
	
	

	@Override
	public Usuario save(UsuarioRegistroDTO registroDTO) {
		Usuario usu = new Usuario(registroDTO.getNombres(), 
				registroDTO.getApellidos(), 
				registroDTO.getDni_CE(), 
				registroDTO.getCelular(), 
				registroDTO.getEmail(),
				passwordEncoder.encode(registroDTO.getPassword()),
				Arrays.asList(new Rol("ROLE_USER")));
		
		return usuarioRepo.save(usu);
	}



	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Usuario usuario = usuarioRepo.findByEmail(username);
		if (usuario == null) {
			throw new UsernameNotFoundException("Usuario o password Invalidos");
		}
		return new User(usuario.getEmail(), usuario.getPassword(), mapearAutoridadesARoles(usuario.getRoles()));
	}
	
	private Collection<? extends GrantedAuthority> mapearAutoridadesARoles(Collection<Rol> roles) {
		return roles.stream().map(role -> new SimpleGrantedAuthority(role.getNombres())).collect(Collectors.toList());
	}



	@Override
	public List<Usuario> listarUsuarios() {
		return usuarioRepo.findAll();
	}

}
